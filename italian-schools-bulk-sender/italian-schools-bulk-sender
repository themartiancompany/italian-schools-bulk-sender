#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_root_requirements() {
  _os="$( \
    uname \
      -o)"
  _check_cmd \
    "email-bulk-sender"
  _check_cmd \
    "italian-schools-data-fetcher"
}

# shellcheck disable=SC2034
_global_variables() {
  send_date=""
  user_email=""
  user_password=""
  smtp_server=""
  smtp_port=""
  email_subject=""
  email_body=""
  data_catalogue=""
  color=""
  quiet=""
}

_recipients_get() {
  local \
    _catalogue="${1}" \
    _results_max="0" \
    _fetcher_opts=() \
    _content \
    _content_cmd=() \
    _data=() \
    _line \
    _db \
    _counter
  _db="${_db_dir}/${_catalogue}.csv"
  if [[ "${quiet}" != "y" ]]; then
    _fetcher_opts+=(
      -v
    )
  fi
  if [[ ! -e "${_db}" ]]; then
    if [[ "${_catalogue}" == "main" ]]; then
      italian-schools-data-fetcher \
        "${_fetcher_opts[@]}"
    else
      _msg_error \
        "catalogue not found" \
        1
    fi
  fi
  _content_cmd=(
    cat
      "${_db}"
    )
  _content="$( \
    "${_content_cmd[@]}" | \
      tail \
        -n \
          +2)"
  if [[ "${_results_max}" != 0 ]]; then
    _content="$( \
      echo \
        "${_content}" | \
        head \
          -n \
            "${_results_max}")"
  fi
  set \
    -o \
    noglob
  IFS=$'\n' \
  _data=(
    $_content
  )
  set \
    +o \
    noglob
  unset \
    _content
  _counter=1
  _total="${#_data[@]}"
  for _line \
    in "${_data[@]}"; do
    _email="$( \
      echo \
        "${_line}" | \
        awk \
          -F ',' \
          '{print $17}')" # email field
    _recipients+=(
      "${_email}"
    )
    if (( ${_counter} % 500 == 0 )) ; then
      _msg_info \
        "result ${_counter} out of ${_total}'"
    fi
    _counter="$(( \
      _counter + 1))"
  done
}

_italian_schools_bulk_sender() {
  local \
    _catalogue="${1}" \
    _email="${2}" \
    _password="${3}" \
    _host="${4}" \
    _port="${5}" \
    _subject="${6}" \
    _body="${7}" \
    _conf_dir \
    _email_bulk_sender_opts=() \
    _recipients=() \
    _session \
    _session_unsent
  if [[ "${quiet}" != "y" ]]; then
    _email_bulk_sender_opts+=(
      -v
    )
  fi
  if [[ "${_email}" != "" ]]; then
    _email_bulk_sender_opts+=(
      -e
        "${_email}"
    )
  fi
  if [[ "${_password}" != "" ]]; then
    _email_bulk_sender_opts+=(
      -k
        "${_password}"
    )
  fi
  if [[ "${_host}" != "" ]]; then
    _email_bulk_sender_opts+=(
      -H
        "${_host}"
    )
  fi
  if [[ "${_port}" != "" ]]; then
    _email_bulk_sender_opts+=(
      -P
        "${_port}"
    )
  fi
  if [[ "${_subject}" != "" ]]; then
    _email_bulk_sender_opts+=(
      -s
        "${_subject}"
    )
  fi
  if [[ "${_subject}" != "" ]]; then
    _email_bulk_sender_opts+=(
      -b
        "${_body}"
    )
  fi
  _conf_dir="${HOME}/.config/$(_get "app" "name")"
  _session="${_conf_dir}/${_catalogue}-${_email}.txt"
  _session_unsent="${_conf_dir}/${_catalogue}-${_email}-unsent.txt"
  _db_dir="${HOME}/.config/italian-schools-data-fetcher"
  _recipients_get \
    "${_catalogue}"
  _i=0
  if [[ ! -e "${_session}" ]]; then
    _msg_info \
      "new session"
    mkdir \
      -p \
      "$(dirname \
           "${_session}")"
    touch \
      "${_session}"
    touch \
      "${_session_unsent}"
  fi
  _resume="$( \
    cat \
      "${_session}")"
  if [[ "${_resume}" != "" ]]; then
    _i="${_resume}"
    _msg_info \
      "resuming from ${_i}"
  fi
  _total="${#_recipients[@]}"
  while \
    (( "${_i}" < "${_total}" )); do
    if \
      [[ "${_recipients[$_i]}" == "" ]] || \
      [[ "${_recipients[$_i]}" == "Non Disponibile" ]]; then
      _msg_warning \
        "email far recipient '${_i}' was not available"
      echo \
        "${_i} >> \
          ""${_session_unsent}"
    else
      email-bulk-sender \
        "${_email_bulk_sender_opts[@]}" \
        "${_recipients[$_i]}"
    fi
    _i="$((_i + 1))"
    echo \
      "${_i}" > \
      "${_session}"
  done
  rm \
    "${_session}"
}

_set_overrides() {
  _set_override \
    "data" \
    "catalogue" \
    "main"
  _set_override \
    "send" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "email" \
    ""
  _set_override \
    "user" \
    "password" \
    ""
  _set_override \
    "smtp" \
    "server" \
    ""
  _set_override \
    "smtp" \
    "port" \
    "465"
  _set_override \
    "email" \
    "subject" \
    ""
  _set_override \
    "email" \
    "body" \
    ""
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Send date:   $(_get "send" "date")"
  _msg_info "           Data Catalogue:   $(_get "data" "catalogue")"
  _msg_info "               User email:   $(_get "user" "email")"
  _msg_info "            User password:   $(_get "user" "password")"
  _msg_info "              SMTP server:   $(_get "smtp" "server")"
  _msg_info "                SMTP port:   $(_get "smtp" "port")"
  _msg_info "            Email subject:   $(_get "email" "subject")"
  _msg_info "               Email body:   $(_get "email" "body")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Instantly communicate with all schools in the country.

Usage:
  $(_get "app" "name")
    [options]
  options:
     -d <data_catalogue>       Data catalogue (main).
                               Default: $(_get "data" "catalogue")
     -e <email>                User email.
                               Default: $(_get "user" "email")
     -k <password>             User password
                               Default: $(_get "user" "password")
     -H <smtp_server>          SMTP server
                               Default: $(_get "smtp" "server")
     -P <smtp_port>            SMTP port
                               Default: $(_get "smtp" "port")
     -s <subject>              Email subject
                               Default: $(_get "email" "subject")
     -b <body>                 Email body
                               Default: $(_get "email" "body")

     -h                        This message.
     -v                        Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'd:e:k:H:P:s:b:cvh?' \
    arg; do
  case \
    "${arg}" in
    d) override_data_catalogue="${OPTARG}" ;;
    e) override_user_email="${OPTARG}" ;;
    k) override_user_password="${OPTARG}" ;;
    H) override_smtp_server="${OPTARG}" ;;
    P) override_smtp_port="${OPTARG}" ;;
    s) override_email_subject="${OPTARG}" ;;
    b) override_email_body="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
app_opts=(
  "$(_get \
       "data" \
       "catalogue")"
  "$(_get \
       "user" \
       "email")"
  "$(_get \
       "user" \
       "password")"
  "$(_get \
       "smtp" \
       "server")"
  "$(_get \
       "smtp" \
       "port")"
  "$(_get \
       "email" \
       "subject")"
  "$(_get \
       "email" \
       "body")"
)
_show_config
_italian_schools_bulk_sender \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
